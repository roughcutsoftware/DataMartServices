// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using System.IO;
using Roughcut.DataMartServices.Infrastructure.DbModels;

namespace Roughcut.DataMartServices.Infrastructure.DbContexts
{


    public partial class DataMartServicesDbContext : DbContext
    {
        public DataMartServicesDbContext()
        {
        }

        public DataMartServicesDbContext(DbContextOptions<DataMartServicesDbContext> options)
            : base(options)
        {
        }

        static DataMartServicesDbContext()
        {
            //Database.SetInitializer<DataMartServicesDbContext>(null);
        }

        //public DataMartServicesDbContext()
        //    : base("Name=DataMartServicesDbContext")
        //{
        //}

        // overload/default constructer 
        public DataMartServicesDbContext(string dbConnString)
            //: base(dbConnString)
        {

            // google search:
            // https://www.google.com/search?q=how+to+use+Microsoft.Extensions.Configuration
            // https://swimburger.net/blog/dotnet/using-configurationproviders-from-microsoft-extensions-configuration-on-dotnet-framework
            var configuration = new ConfigurationBuilder()
                //.SetBasePath(Directory.GetCurrentDirectory())
                //.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)

                //// https://stackoverflow.com/questions/65564889/established-dependency-injection-in-net-core-console-application-for-ef-core-db
                ////.AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json", optional: true)


                //// https://stackoverflow.com/questions/42268265/how-to-get-manage-user-secrets-in-a-net-core-console-application
                //// https://github.com/dotnet/extensions/issues/2743
                //.AddUserSecrets<ConnectionStrings>(optional: false)

                //.AddEnvironmentVariables()
                .Build();

            
            //
            DbContextOptionsBuilder optionsBuilder = new DbContextOptionsBuilder();

            // 
            optionsBuilder.UseSqlServer(dbConnString);

            // 
            base.OnConfiguring(optionsBuilder);

        }

        public virtual DbSet<DimDateTime> DimDateTime { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\mssqllocaldb;Initial Catalog=DataMartServices;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DimDateTime>(entity =>
            {
                entity.HasKey(e => e.DimDateTimeKeyId)
                    .HasName("PK_dbo.DimDateTime");

                entity.Property(e => e.DimDateTimeKeyId).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}